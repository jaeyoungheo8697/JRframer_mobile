import * as React from "react"
import { Frame, ControlType, addPropertyControls } from "framer"
import { url } from "framer/resource"
import { facebook, google } from "./kits"

function isPathAbsolute(path: string): boolean {
    return /^(?:\/|[a-z]+:\/\/)/.test(path)
}

export const sounds = Object.assign(facebook, { "———————": "" }, google)

export function playSound(soundName: string | HTMLAudioElement): void {
    if (typeof soundName === "string") {
        let sound: HTMLAudioElement

        if (isPathAbsolute(soundName)) {
            sound = new Audio(soundName)
        } else {
            sound = new Audio(
                url(
                    soundName.replace(
                        "./",
                        "./node_modules/@framer/ismael.sounds/"
                    )
                )
            )
        }

        // @ts-ignore
        sound.cloneNode(false).play()
    } else {
        // @ts-ignore
        soundName.cloneNode(false).play()
    }
}

function playSoundLocal(soundName: string | HTMLAudioElement): void {
    if (typeof soundName === "string") {
        let sound: HTMLAudioElement = new Audio(url(soundName))

        // @ts-ignore
        sound.cloneNode(false).play()
    }
}

export function Sounds(props: any): any {
    const {
        eventName,
        soundName,
        eventName2,
        soundName2,
        soundName3,
        eventName3,
        soundName4,
        eventName4,
        soundName5,
        eventName5,
        triggers,
        ...rest
    } = props

    let event, event2, event3, event4, event5

    event = { [eventName]: () => playSoundLocal(sounds[soundName]) }

    if (triggers >= 2) {
        event2 = { [eventName2]: () => playSoundLocal(sounds[soundName2]) }
    }

    if (triggers >= 3) {
        event3 = { [eventName3]: () => playSoundLocal(sounds[soundName3]) }
    }

    if (triggers >= 4) {
        event4 = { [eventName4]: () => playSoundLocal(sounds[soundName4]) }
    }

    if (triggers >= 5) {
        event5 = { [eventName5]: () => playSoundLocal(sounds[soundName5]) }
    }

    if (!props.children.length) {
        return <Frame size={"100%"}>Connect to a frame</Frame>
    }

    return (
        <Frame
            size={"100%"}
            background="transparent"
            {...event}
            {...event2}
            {...event3}
            {...event4}
            {...event5}
            {...rest}
        >
            {props.children}
        </Frame>
    )
}

const events = [
    "onTap",
    "onTapStart",
    "whileTap",
    "whileHover",
    "onAnimationStart",
    "onAnimationEnd",
    "onDrag",
    "onDragStart",
    "onDragEnd",
    "onFocus",
]

addPropertyControls(Sounds, {
    triggers: {
        type: ControlType.Number,
        defaultValue: 1,
        step: 1,
        min: 1,
        max: 5,
        displayStepper: true,
        title: "Triggers",
    },
    eventName: {
        type: ControlType.Enum,
        defaultValue: events[0],
        options: events,
        optionTitles: events,
        title: "Event",
    },
    soundName: {
        type: ControlType.Enum,
        defaultValue: "",
        options: Object.keys(sounds),
        title: "Sound",
    },
    eventName2: {
        type: ControlType.Enum,
        defaultValue: "",
        options: events,
        optionTitles: events,
        title: "Event 2",
        hidden(props) {
            return props.triggers < 2
        },
    },
    soundName2: {
        type: ControlType.Enum,
        defaultValue: "",
        options: Object.keys(sounds),
        title: "Sound 2",
        hidden(props) {
            return props.triggers < 2
        },
    },
    eventName3: {
        type: ControlType.Enum,
        defaultValue: "",
        options: events,
        optionTitles: events,
        title: "Event 3",
        hidden(props) {
            return props.triggers < 3
        },
    },
    soundName3: {
        type: ControlType.Enum,
        defaultValue: "",
        options: Object.keys(sounds),
        title: "Sound 3",
        hidden(props) {
            return props.triggers < 3
        },
    },
    eventName4: {
        type: ControlType.Enum,
        defaultValue: "",
        options: events,
        optionTitles: events,
        title: "Event 4",
        hidden(props) {
            return props.triggers < 4
        },
    },
    soundName4: {
        type: ControlType.Enum,
        defaultValue: "",
        options: Object.keys(sounds),
        title: "Sound 4",
        hidden(props) {
            return props.triggers < 4
        },
    },
    eventName5: {
        type: ControlType.Enum,
        defaultValue: "",
        options: events,
        optionTitles: events,
        title: "Event 5",
        hidden(props) {
            return props.triggers < 5
        },
    },
    soundName5: {
        type: ControlType.Enum,
        defaultValue: "",
        options: Object.keys(sounds),
        title: "Sound 5",
        hidden(props) {
            return props.triggers < 5
        },
    },
})
